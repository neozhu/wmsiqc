@model WebApp.Models.Employee

<script type="text/javascript">
//初始化 Employee datagrid
var $employeesdg = $('#employees_datagrid');
$(() => {
    $employeesdg.datagrid({
            rownumbers: true,
            iconCls: 'fa fa-list',
            idField: 'Id',
            sortName: 'Id',
            sortOrder: 'asc',
            remoteFilter: true,
            singleSelect: true,
            method: 'get',
            onClickCell: employees_onClickCell,
            pagination: true,
            striped: true,
            columns: [[
		     /*{field:'Id',width:80 ,sortable:true,resizable:true }*/
			{
                 field:'Name', 
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Name)</span>', 
                 width:140,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Name)',required:true ,validType:'length[0,20]'  }  
                       },
                 sortable:true,
                 resizable:true 
			},
			{
                 field:'Title', 
                 title:'@Html.DisplayNameFor(model => model.Title)', 
                 width:140,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Title)',required:false ,validType:'length[0,30]'  }  
                       },
                 sortable:true,
                 resizable:true 
			},
			{
                 field:'Sex', 
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Sex)</span>', 
                 width:140,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Sex)',required:true ,validType:'length[0,10]'  }  
                       },
                 sortable:true,
                 resizable:true 
			},
			{
                 field:'Age', 
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Age)</span>', 
                 width:100, 
                 align:'right',
                 editor:{
                        type:'numberbox',
                        options:{prompt:'@Html.DisplayNameFor(model => model.Age)', required:true  ,precision:0  } 
                        },
                sortable:true,
                resizable:true,
                formatter:numberformatter
			},
            {
                field:'Brithday', 
                title:'<span class="required">@Html.DisplayNameFor(model => model.Brithday)</span>', 
                width:120, 
                align:'right', 
                editor:{
                      type:'datebox',
                      options:{prompt:'@Html.DisplayNameFor(model => model.Brithday)',required:true}  
                      },
                sortable:true, 
                resizable:true, 
                formatter:dateformatter 
			} ,
			{
                 field:'IsDeleted', 
                 title:'<span class="required">@Html.DisplayNameFor(model => model.IsDeleted)</span>', 
                 width:100, 
                 align:'right',
                 editor:{
                        type:'numberbox',
                        options:{prompt:'@Html.DisplayNameFor(model => model.IsDeleted)', required:true  ,precision:0  } 
                        },
                sortable:true,
                resizable:true,
                formatter:numberformatter
			},
			{
                field:'CompanyId',
                title:'<span class="required">@Html.DisplayNameFor(model => model.CompanyId)</span>',
                width:160, 
                sortable:true, 
                resizable:true,
                formatter:function(value,row) {
				        return row.CompanyName;
					},
			    editor:{
					    type:'combobox',
					    options:{
								prompt:'@Html.DisplayNameFor(model => model.CompanyId)' ,
                                mode: 'remote',
								valueField:'Id',
								textField:'Name',
								method:'get',
								url:'/Companies/GetCompaniesAsync',
								required:true
							}
						}
			},
            ]]
            });
            //初始化 datagrid filter
            $employeesdg.datagrid("enableFilter",[
				{
					  field: "Id",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "Age",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "IsDeleted",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "Brithday",
					  type: "dateRange",
					  options: {
						  onChange: function (value) {
							    $employeesdg.datagrid("addFilterRule", {
									  field: "Brithday",
									  op: "between",
									  value: value
								  });
							    $employeesdg.datagrid("doFilter");
						  }
					  }
				  },
		   {
				 field: "CompanyId",
				 type:"combobox",
				 options:{
								valueField:"Id",
								textField:"Name",
								method:"get",
								url:"/Companies/GetCompaniesAsync",
								onChange: function (value) {
								if (value == "") {
									$employeesdg.datagrid("removeFilterRule", "CompanyId");
								} else {
									$employeesdg.datagrid("addFilterRule", {
										field: "CompanyId",
										op: "equal",
										value: value
								});
							}
							$employeesdg.datagrid("doFilter");
						}
					}
		   },
		   ]);

});
    //datagrid CRUD method
    var employees_editIndex = undefined;
    //取消
    function employees_reject() {
		$employeesdg.datagrid("rejectChanges");
		employees_editIndex = undefined;
    }
    //重新加载数据
    function employees_reload() {
			if (endEditing()) {
				$employeesdg.datagrid("reload");
			}
	}
    //关闭编辑状态
	function employees_endEditing() {
			if (employees_editIndex === undefined) {
                return true; 
            }
			if ($employeesdg.datagrid("validateRow", employees_editIndex)) {

								var ed = $employeesdg.datagrid("getEditor", { index: employees_editIndex, field: "CompanyId" });
				var companyname = $(ed.target).combobox("getText");
				var companyid = $(ed.target).combobox("getValue");
				$employeesdg.datagrid("getRows")[employees_editIndex]["CompanyName"] =  companyname;
				$employeesdg.datagrid("getRows")[employees_editIndex]["CompanyId"] = companyid;
								$employeesdg.datagrid("endEdit", employees_editIndex);
				employees_editIndex = undefined;
                return true;
			} else {
				return false;
			}
		}
    //单击列开启编辑功能
	function employees_onClickCell(index, field) {
			var _operates = ["_operate1", "_operate2", "_operate3", "ck"];
			if ($.inArray(field, _operates) >= 0) {
				return false;
			}
			if (employees_editIndex !== index) {
				if (employees_endEditing()) {
					$employeesdg.datagrid("selectRow", index)
							.datagrid("beginEdit", index);
                    employees_editIndex = index;
					var ed = $employeesdg.datagrid("getEditor", { index: index, field: field });
					if (ed) {
						($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
					}
				} else {
					$employeesdg.datagrid("selectRow", employees_editIndex);
				}
			}
		}
        //新增记录
    function employees_append() {
			if (employees_endEditing()) {
				//对必填字段进行默认值初始化
				$employeesdg.datagrid("insertRow", 
                               { index: 0,
                                  row: {
                                  
                                  CompanyId:companyid
                                  }
                                });
				employees_editIndex = 0;
				$employeesdg.datagrid("selectRow", employees_editIndex)
						.datagrid("beginEdit", employees_editIndex);
			}
		}
    //删除编辑的行
	function employees_removeit() {
		if (employees_editIndex !== undefined) {  
			$employeesdg.datagrid("cancelEdit", employees_editIndex)
					           .datagrid("deleteRow", employees_editIndex);
			employees_editIndex = undefined;
        }
	}
    //删除选中的行
    function employees_deletechecked() {
            var rows = $employeesdg.datagrid("getChecked");
            if (rows.length > 0) {
                var id = rows.map(item => {
                    return item.Id;
                });
                $.messager.confirm("确认", "你确定要删除这些记录?",result => {
                    if (result) {
                        $.post("/Employees/DeleteCheckedAsync", { id: id })
                         .done(response => {
                            if (response.success) {
                                $employeesdg.datagrid("reload");
                            } else {
                                $.messager.alert("错误", response.err,"error");
                            }
                         });
                    }
                });  
            } else {
                $.messager.alert("提示", "请先选择要删除的记录!");
            }
      }
    //提交保存后台数据库
	function employees_accept() {
			if (employees_endEditing()) {
				if ($employeesdg.datagrid("getChanges").length) {
					var inserted = $employeesdg.datagrid("getChanges", "inserted");
					var deleted = $employeesdg.datagrid("getChanges", "deleted");
					var updated = $employeesdg.datagrid("getChanges", "updated");
					var item = new Object();
					if (inserted.length) {
						item.inserted = inserted;
					}
					if (deleted.length) {
						item.deleted = deleted;
					}
					if (updated.length) {
						item.updated = updated;
					}
					//console.log(JSON.stringify(item));
					$.post("/Employees/SaveDataAsync", item)
                     .done(response => {
						//console.log(response);
						if (response.success) {
							$.messager.alert("提示", "提交成功!");
							$employeesdg.datagrid("acceptChanges");
							$employeesdg.datagrid("reload");
						} else {
                           $.messager.alert("错误", response.err ,"error");
                        }
					  })
                      .fail((jqXHR, textStatus, errorThrown) => {
						//console.log(errorThrown);
						$.messager.alert("错误", "提交错误了!" + errorThrown,"error");

					  });
				}
			}
		}       
</script>


 